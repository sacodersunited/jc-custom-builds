---
import Layout from "../../layouts/Layout.astro"
import Header from "../../components/Header.astro"
// Good example of dynamic routes from Astro docs
// https://docs.astro.build/en/tutorial/5-astro-api/2/#create-pages-dynamically
export async function getStaticPaths() {
  const strapiUrl = import.meta.env.STRAPI_URL
  const response = await fetch(`${strapiUrl}/graphql`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json"
    },
    body: JSON.stringify({
      query: `
			query {				
        projects {
          data {
            attributes {
              Title
              subtitle
              Description
              featured_before {
                data {
                  attributes {
                    name
                    alternativeText
                    formats
                  }
                }
              }
              featured_after {
                data {
                  attributes {
                    name
                    alternativeText
                    formats
                  }
                }
              }
              all_photos {
                data {
                  attributes {
                    name
                    alternativeText
                    url
                  }
                }
              }
            }
          }
        }
		  }	
		`
    })
  })

  const json = await response.json()
  const projects = json.data.projects.data
  // TODO: make this dynamic
  return [
    { params: { service: "accent-walls" }, props: { projects: projects } },
    { params: { service: "sheds-fences-and-decks" }, props: { projects: projects } },
    { params: { service: "interior-and-cabinet-painting" }, props: { projects: projects } }
  ]
}

const { service } = Astro.params
const { projects } = Astro.props

// slugify the Title
const slug = (str) =>
  str
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, "-")
    .replace(/(^-|-$)+/g, "")

const allProjects = projects.map((project) => ({
  title: project.attributes.Title,
  subtitle: project.attributes.subtitle,
  slug: slug(project.attributes.Title),
  description: project.attributes.Description,
  featured_before: project.attributes.featured_before,
  featured_after: project.attributes.featured_before,
  all_photos: project.attributes.all_photos.data
}))

const filteredProject = allProjects.filter((project) => project.slug.includes(service))
const uniqueProjects = [...new Set(allProjects.map((project) => project.slug))]
---

<!-- <pre>{JSON.stringify(allProjects, null, 2)}</pre> --><!-- <pre>url is {service}</pre> --><!-- <pre>unique is {JSON.stringify(uniqueProjects, null, 2)}</pre> -->{
  filteredProject.map((project) => (
    <>
      <Layout title={project.title}>
        <Header title={project.title} />
        <main>
          <section>
            <h2 class="text-3xl font-serif mb-3">{project.subtitle}</h2>
            <p class="md:w-3/4">{project.description}</p>
          </section>
        </main>
      </Layout>
    </>
  ))
}
